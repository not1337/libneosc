diff -rNu openssh-7.4p1.orig/ssh-agent.c openssh-7.4p1/ssh-agent.c
--- openssh-7.4p1.orig/ssh-agent.c	2016-12-19 05:59:41.000000000 +0100
+++ openssh-7.4p1/ssh-agent.c	2016-12-29 03:16:36.302614877 +0100
@@ -742,10 +742,11 @@
 }
 
 #ifdef ENABLE_PKCS11
+#define KEYID_MAX 32
 static void
 process_add_smartcard_key(SocketEntry *e)
 {
-	char *provider = NULL, *pin, canonical_provider[PATH_MAX];
+	char *provider = NULL, *pin, canonical_provider[PATH_MAX+KEYID_MAX+1];
 	int r, i, version, count = 0, success = 0, confirm = 0;
 	u_int seconds;
 	time_t death = 0;
@@ -753,6 +754,8 @@
 	struct sshkey **keys = NULL, *k;
 	Identity *id;
 	Idtab *tab;
+	char *delim;
+	u_int offset;
 
 	if ((r = sshbuf_get_cstring(e->request, &provider, NULL)) != 0 ||
 	    (r = sshbuf_get_cstring(e->request, &pin, NULL)) != 0)
@@ -777,14 +780,27 @@
 			goto send;
 		}
 	}
-	if (realpath(provider, canonical_provider) == NULL) {
+	delim = strchr(provider, '@');
+	if (delim != NULL) {
+		*delim = 0;
+		offset = strlen(provider);
+		if (offset > KEYID_MAX) {
+			verbose("id too long: %s", provider);
+			goto send;
+		}
+		strcpy(canonical_provider, provider);
+		canonical_provider[offset++] = '@';
+	} else {
+		offset = 0;
+	}
+	if (realpath(provider+offset, canonical_provider+offset) == NULL) {
 		verbose("failed PKCS#11 add of \"%.100s\": realpath: %s",
 		    provider, strerror(errno));
 		goto send;
 	}
-	if (match_pattern_list(canonical_provider, pkcs11_whitelist, 0) != 1) {
+	if (match_pattern_list(canonical_provider+offset, pkcs11_whitelist, 0) != 1) {
 		verbose("refusing PKCS#11 add of \"%.100s\": "
-		    "provider not whitelisted", canonical_provider);
+		    "provider not whitelisted", canonical_provider+offset);
 		goto send;
 	}
 	debug("%s: add %.100s", __func__, canonical_provider);
diff -rNu openssh-7.4p1.orig/sshconnect2.c openssh-7.4p1/sshconnect2.c
--- openssh-7.4p1.orig/sshconnect2.c	2016-12-19 05:59:41.000000000 +0100
+++ openssh-7.4p1/sshconnect2.c	2016-12-29 02:37:25.245523376 +0100
@@ -1456,8 +1456,8 @@
 		 */
 		if (id->key != NULL) {
 			if (try_identity(id)) {
-				debug("Offering %s public key: %s",
-				    key_type(id->key), id->filename);
+				debug("Offering %s public key: %s (%p)",
+				    key_type(id->key), id->filename, id->key);
 				sent = send_pubkey_test(authctxt, id);
 			}
 		} else {
diff -rNu openssh-7.4p1.orig/ssh-pkcs11.c openssh-7.4p1/ssh-pkcs11.c
--- openssh-7.4p1.orig/ssh-pkcs11.c	2016-12-19 05:59:41.000000000 +0100
+++ openssh-7.4p1/ssh-pkcs11.c	2016-12-29 02:37:25.246523382 +0100
@@ -286,7 +286,9 @@
 	/* try to find object w/CKA_SIGN first, retry w/o */
 	if (pkcs11_find(k11->provider, k11->slotidx, key_filter, 3, &obj) < 0 &&
 	    pkcs11_find(k11->provider, k11->slotidx, key_filter, 2, &obj) < 0) {
-		error("cannot find private key");
+		char * hexid = tohex(k11->keyid,k11->keyid_len);
+		error("cannot find pkcs private key id %s",  hexid);
+		free(hexid);
 	} else if ((rv = f->C_SignInit(si->session, &mech, obj)) != CKR_OK) {
 		error("C_SignInit failed: %lu", rv);
 	} else {
@@ -415,12 +417,14 @@
 	CK_ATTRIBUTE		pubkey_attribs[] = {
 		{ CKA_ID, NULL, 0 },
 		{ CKA_MODULUS, NULL, 0 },
-		{ CKA_PUBLIC_EXPONENT, NULL, 0 }
+		{ CKA_PUBLIC_EXPONENT, NULL, 0 },
+		{ CKA_LABEL, NULL, 0 }
 	};
 	CK_ATTRIBUTE		cert_attribs[] = {
 		{ CKA_ID, NULL, 0 },
 		{ CKA_SUBJECT, NULL, 0 },
-		{ CKA_VALUE, NULL, 0 }
+		{ CKA_VALUE, NULL, 0 },
+		{ CKA_LABEL, NULL, 0 }
 	};
 	pubkey_filter[0].pValue = &pubkey_class;
 	cert_filter[0].pValue = &cert_class;
@@ -446,7 +450,7 @@
 
 static int
 pkcs11_fetch_keys_filter(struct pkcs11_provider *p, CK_ULONG slotidx,
-    CK_ATTRIBUTE filter[], CK_ATTRIBUTE attribs[3],
+    CK_ATTRIBUTE filter[], CK_ATTRIBUTE attribs[4],
     struct sshkey ***keysp, int *nkeys)
 {
 	struct sshkey		*key;
@@ -469,8 +473,8 @@
 		return (-1);
 	}
 	while (1) {
-		/* XXX 3 attributes in attribs[] */
-		for (i = 0; i < 3; i++) {
+		/* XXX 4 attributes in attribs[] */
+		for (i = 0; i < 4; i++) {
 			attribs[i].pValue = NULL;
 			attribs[i].ulValueLen = 0;
 		}
@@ -478,7 +482,7 @@
 		    || nfound == 0)
 			break;
 		/* found a key, so figure out size of the attributes */
-		if ((rv = f->C_GetAttributeValue(session, obj, attribs, 3))
+		if ((rv = f->C_GetAttributeValue(session, obj, attribs, 4))
 		    != CKR_OK) {
 			error("C_GetAttributeValue failed: %lu", rv);
 			continue;
@@ -493,7 +497,7 @@
 			continue;
 		}
 		/* allocate buffers for attributes */
-		for (i = 0; i < 3; i++) {
+		for (i = 0; i < 4; i++) {
 			if (attribs[i].ulValueLen > 0) {
 				attribs[i].pValue = xmalloc(
 				    attribs[i].ulValueLen);
@@ -505,7 +509,7 @@
 		 * or ID, subject and value for certificates.
 		 */
 		rsa = NULL;
-		if ((rv = f->C_GetAttributeValue(session, obj, attribs, 3))
+		if ((rv = f->C_GetAttributeValue(session, obj, attribs, 4))
 		    != CKR_OK) {
 			error("C_GetAttributeValue failed: %lu", rv);
 		} else if (attribs[1].type == CKA_MODULUS ) {
@@ -541,20 +545,38 @@
 			key->rsa = rsa;
 			key->type = KEY_RSA;
 			key->flags |= SSHKEY_FLAG_EXT;
+
+			char * hex = tohex(attribs[0].pValue, (int) attribs[0].ulValueLen);
+
+			char label[128 + 2 + 3 + 1] = "";
+			if (attribs[3].ulValueLen > 0) {
+				unsigned long len = MIN(128, attribs[3].ulValueLen);
+				strcat(label," <");
+				strncpy(label+2, attribs[3].pValue, len);
+				if (len == 128)
+					strcat(label,"...");
+				strcat(label,">");
+			};
+
 			if (pkcs11_key_included(keysp, nkeys, key)) {
+				debug("Ignoring key  %s%s (%p), already included", hex, label, key);
 				sshkey_free(key);
+			}
+			else if (index(p->name,'@') && strncmp(hex,p->name,strlen(hex))) {
+				debug("Ignoring key  %s%s (%p), not explicitly listed", hex, label, key);
 			} else {
 				/* expand key array and add key */
 				*keysp = xreallocarray(*keysp, *nkeys + 1,
 				    sizeof(struct sshkey *));
 				(*keysp)[*nkeys] = key;
 				*nkeys = *nkeys + 1;
-				debug("have %d keys", *nkeys);
+				debug("Key %d: %s%s (%p)", *nkeys, hex, label, key);
 			}
+			free(hex);
 		} else if (rsa) {
 			RSA_free(rsa);
 		}
-		for (i = 0; i < 3; i++)
+		for (i = 0; i < 4; i++)
 			free(attribs[i].pValue);
 	}
 	if ((rv = f->C_FindObjectsFinal(session)) != CKR_OK)
@@ -574,6 +596,7 @@
 	CK_FUNCTION_LIST *f = NULL;
 	CK_TOKEN_INFO *token;
 	CK_ULONG i;
+	char *dll_filename = provider_id;
 
 	*keyp = NULL;
 	if (pkcs11_provider_lookup(provider_id) != NULL) {
@@ -581,8 +604,12 @@
 		    __func__, provider_id);
 		goto fail;
 	}
+
+	if (index(provider_id,'@'))
+		dll_filename = index(provider_id,'@') + 1;
+
 	/* open shared pkcs11-libarary */
-	if ((handle = dlopen(provider_id, RTLD_NOW)) == NULL) {
+	if ((handle = dlopen(dll_filename, RTLD_NOW)) == NULL) {
 		error("dlopen %s failed: %s", provider_id, dlerror());
 		goto fail;
 	}
