.TH NEOSC_USB_HOTP 3  2015-04-10 "" ""
.SH NAME
neosc_usb_hotp \- configure YubiKey HOTP
.SH SYNOPSIS
.nf
.B #include <libneosc.h>
.sp
.BI "int neosc_usb_hotp(void *handle, int slot, int omp, int tt, int mui,"
.BI "                   int imf, unsigned char *aesdata, int aeslen,"
.BI "                   int tktflags, int cfgflags, int extflags,"
.BI "                   unsigned char *newcode, int newlen,"
.BI "                   unsigned char *code, int codelen);"
.SH DESCRIPTION
The
.BR neosc_usb_hotp()
function configures the YubiKey HOTP functionality for the selected slot. slot must be 0 or 1 for slot 1 or slot 2. omp is the OATH manufacturer prefix in the range of 0 to 255. tt is the token type in the range of 0 to 255. mui is the manufacturer unique identifier in the range of 0 to 99999999. if mui is set to -1 the combination of omp, tt and mui is ignored. imf is the initial moving factor in the range of 0 to 0xffff0 in steps of 16. aesdata points to the 20 byte HMAC secret. tktflags may be 0 or any combination of NEOSC_TKT_TAB0, NEOSC_TKT_TAB1, NEOSC_TKT_TAB2, NEOSC_TKT_DELAY1, NEOSC_TKT_DELAY2, NEOSC_TKT_CR and NEOSC_TKT_PROTECT2. cfgflags may be 0 or any combination of NEOSC_CFG_HOTP_SENDREF, NEOSC_CFG_HOTP_8, NEOSC_CFG_HOTP_PACE_10, NEOSC_CFG_HOTP_PACE_20, NEOSC_CFG_HOTP_MODHEX1 and NEOSC_CFG_HOTP_MODHEX2. extflags may be any valid combination of the global extended flags. If newcode is not NULL it points to the new 6 byte configuration access code. If code is not NULL it points to the current 6 byte configuration access code.
.SH RETURN VALUE
The
.BR neosc_usb_hotp()
function returns zero in case of success and -1 in case of any error.
.SH SEE ALSO
.BR neosc_usb_open (3)
.SH AUTHOR
Written by Andreas Steinmetz
.SH COPYRIGHT
Copyright \(co 2015 Andreas Steinmetz
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
